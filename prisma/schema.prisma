// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  CLOSED
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  EXTERNAL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REVERSED
}

model User {
  id           String        @id @default(uuid())
  fname        String
  lname        String
  username     String        @unique
  email        String        @unique
  password     String
  street       String
  state        String
  zip          String
  city         String
  country      String
  phone        String
  role         Role          @default(USER)


  emailVerified    Boolean  @default(false)
  verificationToken String? @unique


  otpCode       String?  // Store OTP temporarily
  otpExpiresAt  DateTime? // Store OTP expiry time

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  accounts     Account[]
  sentTransactions     Transaction[] @relation("Sender")
  receivedTransactions Transaction[] @relation("Recipient")
}

model Account {
  id             String        @id @default(uuid())
  accountNumber  String        @unique
  balance        Float         @default(0)
  accountType    AccountType
  createdAt      DateTime      @default(now())
  closedAt       DateTime?
  status         AccountStatus

  userId         String
  user           User          @relation(fields: [userId], references: [id])

  transactions   Transaction[]
}

model Transaction {
  id               String            @id @default(uuid())
  amount           Float
  type             TransactionType
  status           TransactionStatus @default(PENDING)
  description      String?
  createdAt        DateTime          @default(now())

  // Sender account
  accountId        String
  account          Account           @relation(fields: [accountId], references: [id])

  // Sender user (just for quick access)
  senderUserId     String
  senderUser       User              @relation("Sender", fields: [senderUserId], references: [id])

  // Recipient user (for internal transfers)
  recipientUserId  String?
  recipientUser    User?             @relation("Recipient", fields: [recipientUserId], references: [id])

 // Optional external reference (no relation for now)
  externalBankName      String?
  externalAccountNumber String?

  // Relation to external bank account
  externalBankAccountId String?
  externalBankAccount   ExternalBankAccount? @relation(fields: [externalBankAccountId], references: [id])

}

model ExternalBankAccount {
  id                     String    @id @default(uuid())
  externalBankName        String    // Name of the external bank
  externalAccountNumber   String    @unique // External account number
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  transactions            Transaction[] // Linking to transactions involving this external account
}
